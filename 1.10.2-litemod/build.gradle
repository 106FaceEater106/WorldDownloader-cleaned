buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = 'sponge'
            url = 'http://repo.spongepowered.org/maven'
        }
        jcenter()
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.2-SNAPSHOT'
        classpath 'pokechu22.test.begradle:begradle:0.0.3'
        classpath 'org.spongepowered:mixingradle:0.4-SNAPSHOT'
    }
}

apply plugin: 'java'

version = "4.0.0.2-SNAPSHOT"
group = "wdl"
archivesBaseName = "LiteModWDL"

apply plugin: 'net.minecraftforge.gradle.liteloader'
apply plugin: 'pokechu22.test.customsrg'
apply plugin: 'org.spongepowered.mixin'

minecraft {
    version = "1.10.2"
    mappings = "snapshot_20170301"
    runDir = "run"
}

extraSrgs {
    add file('../srgs/EntityHorseToEquineEntity.srg')
    add file('../srgs/AnimalChestToContainerHorseChest.srg')
}

sourceSets {
    main {
        java {
            srcDir "src/main/java"
            srcDir project(':1.10.2').file("src/main/java")
            srcDir project(':share').file("src/main/java")
        }
        resources {
            srcDir "src/main/resources"
            srcDir project(':share').file("src/main/resources")
        }
        // Refmap declaration must match the refmap name specified in the json config
        refMap = "mixins.LiteModWDL.refmap.json"
    }
}

mixin {
    defaultObfuscationEnv notch
}

litemod {
    json {
        name = "LiteModWDL"
        displayName = "World Downloader for Liteloader"
        author = "uyjulian, pokechu22"
        mcversion = "1.10.2"
        mixinConfigs += "mixins.LiteModWDL.json"
        version = project.version
    }
}

jar {
    from litemod.outputs
}

// Use tabs instead of spaces
fixMcSources {
    astyleConfig = "../astyle.cfg"
    // TEMPORARY, until I can figure out an automatic patch system.
    doFirst {
        def field = net.minecraftforge.gradle.tasks.PostDecompileTask.class.getDeclaredField('patchesMap')
        field.accessible = true
        field.get(fixMcSources).put('net.minecraft.entity.passive.EquineEntity.java', file('../srgs/EE_1.10.x.patch'))
    }
}
