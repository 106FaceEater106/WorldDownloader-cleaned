--- net/minecraft/client/network/NetHandlerPlayClient.java
+++ net/minecraft/client/network/NetHandlerPlayClient.java
@@ -233,7 +233,7 @@
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
-public class NetHandlerPlayClient implements INetHandlerPlayClient {
+public class NetHandlerPlayClient implements INetHandlerPlayClient/* WDL >>> */, wdl.ducks.IBaseChangesApplied/* <<< WDL */ {
 	private static final Logger LOGGER = LogManager.getLogger();
 	private final NetworkManager netManager;
 	private final GameProfile profile;
@@ -662,6 +662,10 @@
 	}
 
 	public void processChunkUnload(SPacketUnloadChunk packetIn) {
+		/* WDL >>> */
+		wdl.WDLHooks.onNHPCHandleChunkUnload(this, this.world, packetIn);
+		/* <<< WDL */
+
 		PacketThreadUtil.checkThreadAndEnqueue(packetIn, this, this.client);
 		this.world.doPreChunk(packetIn.getX(), packetIn.getZ(), false);
 	}
@@ -685,6 +689,10 @@
 	 * Invoked when disconnecting, the parameter is a ChatComponent describing the reason for termination
 	 */
 	public void onDisconnect(ITextComponent reason) {
+		/* WDL >>> */
+		wdl.WDLHooks.onNHPCDisconnect(this, reason);
+		/* <<< WDL */
+
 		this.client.loadWorld((WorldClient)null);
 
 		if (this.guiScreenServer != null) {
@@ -734,6 +742,10 @@
 		} else {
 			this.client.ingameGUI.getChatGUI().printChatMessage(packetIn.getChatComponent());
 		}
+
+		/* WDL >>> */
+		wdl.WDLHooks.onNHPCHandleChat(this, packetIn);
+		/* <<< WDL */
 	}
 
 	/**
@@ -1112,6 +1124,10 @@
 	public void handleBlockAction(SPacketBlockAction packetIn) {
 		PacketThreadUtil.checkThreadAndEnqueue(packetIn, this, this.client);
 		this.client.world.addBlockEvent(packetIn.getBlockPosition(), packetIn.getBlockType(), packetIn.getData1(), packetIn.getData2());
+
+		/* WDL >>> */
+		wdl.WDLHooks.onNHPCHandleBlockAction(this, packetIn);
+		/* <<< WDL */
 	}
 
 	/**
@@ -1181,6 +1197,10 @@
 		MapData mapdata = ItemMap.loadMapData(packetIn.getMapId(), this.client.world);
 		packetIn.setMapdataTo(mapdata);
 		this.client.gameRenderer.getMapItemRenderer().updateMapTexture(mapdata);
+
+		/* WDL >>> */
+		wdl.WDLHooks.onNHPCHandleMaps(this, packetIn);
+		/* <<< WDL */
 	}
 
 	public void handleEffect(SPacketEffect packetIn) {
@@ -1541,6 +1561,10 @@
 			PathEntity pathentity = PathEntity.read(packetbuffer1);
 			this.client.debugRenderer.pathfinding.addPath(j, pathentity, f);
 		}
+
+		/* WDL >>> */
+		wdl.WDLHooks.onNHPCHandleCustomPayload(this, packetIn);
+		/* <<< WDL */
 	}
 
 	/**
